apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "video-analytics-demo.fullname" . }}
  labels:
{{ include "video-analytics-demo.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "video-analytics-demo.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "video-analytics-demo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
      - name: wait-for-rabbitmq
        image: eu.gcr.io/hivecell/helm-demo/busybox:1.30.1
        command: 
          - sh 
          - -c 
          - {{ .Values.initContainers.command }}
      containers:
        - name: "{{ .Chart.Name }}-1"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            privileged: true
          command:
          - sh
          - -c
          {{- if .Values.ngcModel }}
          - apt update; 
            apt install wget unzip -y;
            ls -l  /usr/lib/aarch64-linux-gnu/tegra; 
            {{ .Values.ngcModel.getModel }}; 
            unzip *.zip; 
            cp -r {{ .Values.ngcModel.fileName }} {{ .Values.ngcModel.putModel }}; 
            sed -ie "s/..\/..\/models\/tlt_pretrained_models\/{{ .Values.ngcModel.name}}\/{{ .Values.ngcModel.fileName }}/\/opt\/nvidia\/deepstream\/deepstream-5.1\/samples\/configs\/tlt_pretrained_models\/{{ .Values.ngcModel.fileName }}/g" {{ .Values.ngcModel.modelConfig }}; 
            {{ .Values.command.apprunnercmd}}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports: 
            - name: http
              containerPort: 8554
          volumeMounts:
            - name: ipmount
              mountPath: /etc/config
          readinessProbe:
             exec:
                command:
                 - ls
             initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
             periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
      volumes:
        - name: ipmount
          configMap:
            name: {{ include "video-analytics-demo.fullname" . }}-configmap
{{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

