rbac:
  create: true
  pspEnabled: true
serviceAccount:
  create: true
  name:

replicas: 1

deploymentStrategy: RollingUpdate

readinessProbe:
  exec:
    command:
     - ls
  initialDelaySeconds: 40
  periodSeconds: 7

livenessProbe:
  exec:
    command:
     - ls
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

image:
  repository: eu.gcr.io/hivecell/helm-demo/grafana
  tag: latest-ubuntu
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

securityContext:
  runAsUser: 472
  fsGroup: 472

downloadDashboardsImage:
  repository: appropriate/curl
  tag: latest
  pullPolicy: IfNotPresent

## Pod Annotations
# podAnnotations: {}

## Deployment annotations
# annotations: {}

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: NodePort
  port: 8080
  nodePort: 30300
  annotations: {}
  labels: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: false
  # storageClassName: default
  # accessModes:
  #   - ReadWriteOnce
  # size: 10Gi
  # annotations: {}
  # subPath: ""
  # existingClaim:

adminUser: admin
adminPassword: admin

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

## Extra environment variables that will be pass onto deployment pods
env: {}

## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
## This can be useful for auth tokens, etc
envFromSecret: ""

## Additional grafana server secret mounts
# Defines additional mounts with secrets. Secrets must be manually created in the namespace.
extraSecretMounts: []
  # - name: secret-files
  #   mountPath: /etc/secrets
  #   secretName: grafana-secret-files
  #   readOnly: true

## Pass the plugins you want installed as a list.
##
plugins:
  - innius-video-panel
  # - digrich-bubblechart-panel
  # - grafana-clock-panel

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources: 
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: InfluxDB
      type: influxdb
      url: http://road-traffic-influxdb:8086
      user: admin
      access: proxy
      isDefault: true
      database: grafana

## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/<provider_name>
##
dashboardProviders: 
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards: 
  default:
    influxdb:
      json: |
        {
          "annotations": {
            "list": [
              {
                "builtIn": 1,
                "datasource": "-- Grafana --",
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "type": "dashboard"
              }
            ]
          },
          "editable": true,
          "gnetId": null,
          "graphTooltip": 0,
          "id": 1,
          "iteration": 1628847415310,
          "links": [],
          "panels": [
            {
              "datasource": null,
              "gridPos": {
                "h": 12,
                "w": 11,
                "x": 0,
                "y": 0
              },
              "id": 16,
              "options": {
                "content": "\n<iframe src=\"http://NODE_IP:31010/player/H264_AAC\" scrolling=\"no\"\n            frameborder=\"0\" width=\"700px\" height=\"394px\" style=\"position:absolute; clip:rect(0px,720px,394px,20px); left:-10px;\"/>",
                "mode": "html"
              },
              "pluginVersion": "8.0.5",
              "title": "Live vehicle detections",
              "type": "text"
            },
            {
              "datasource": null,
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "transparent",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 0
                      },
                      {
                        "color": "#EAB839",
                        "value": 400
                      },
                      {
                        "color": "red",
                        "value": 500
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 8,
                "w": 7,
                "x": 11,
                "y": 0
              },
              "id": 11,
              "options": {
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true,
                "text": {}
              },
              "pluginVersion": "8.0.5",
              "targets": [
                {
                  "query": "SELECT count(distinct(\"object_id\")) as \"count\"  FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"!='' GROUP BY time(10m) fill(0)\n",
                  "rawQuery": true,
                  "refId": "A"
                }
              ],
              "title": "Current traffic level by vehicle count, per 10 minutes",
              "type": "gauge"
            },
            {
              "datasource": null,
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    }
                  },
                  "mappings": []
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.van"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Van"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.sedan"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Sedan"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-green",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.coupe"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Coupe"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-yellow",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.largevehicle"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Large vehicle"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-blue",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.truck"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Truck"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-orange",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.suv"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "SUV"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-purple",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 8,
                "w": 6,
                "x": 18,
                "y": 0
              },
              "id": 15,
              "options": {
                "displayLabels": [
                  "name",
                  "value"
                ],
                "legend": {
                  "displayMode": "hidden",
                  "placement": "bottom"
                },
                "pieType": "donut",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "tooltip": {
                  "mode": "multi"
                }
              },
              "targets": [
                {
                  "groupBy": [
                    {
                      "params": [
                        "1m"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "0"
                      ],
                      "type": "fill"
                    }
                  ],
                  "hide": false,
                  "measurement": "amqp_consumer",
                  "orderByTime": "ASC",
                  "policy": "default",
                  "query": "SELECT count(distinct(\"object_id\")) as \"van\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='van' GROUP BY time(10m) fill(0)",
                  "rawQuery": true,
                  "refId": "A",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "object_id"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "distinct"
                      },
                      {
                        "params": [],
                        "type": "count"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "dc",
                      "operator": "=",
                      "value": "deepstream"
                    }
                  ]
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"sedan\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='sedan' GROUP BY time(10m) fill(0)",
                  "rawQuery": true,
                  "refId": "B"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"coupe\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='coupe' GROUP BY time(10m) fill(0)",
                  "rawQuery": true,
                  "refId": "C"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"largevehicle\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='largevehicle' GROUP BY time(10m) fill(0)",
                  "rawQuery": true,
                  "refId": "D"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"truck\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='truck' GROUP BY time(10m) fill(0)",
                  "rawQuery": true,
                  "refId": "E"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"suv\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='suv' GROUP BY time(10m) fill(0)",
                  "rawQuery": true,
                  "refId": "F"
                }
              ],
              "title": "Vehicle amount by type, per 10 minutes",
              "type": "piechart"
            },
            {
              "datasource": null,
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "custom": {
                    "fillOpacity": 16,
                    "lineWidth": 10
                  },
                  "mappings": [
                    {
                      "options": {
                        "0": {
                          "color": "transparent",
                          "index": 3
                        }
                      },
                      "type": "value"
                    },
                    {
                      "options": {
                        "from": 1,
                        "result": {
                          "color": "dark-green",
                          "index": 0,
                          "text": "Low"
                        },
                        "to": 399
                      },
                      "type": "range"
                    },
                    {
                      "options": {
                        "from": 400,
                        "result": {
                          "color": "dark-yellow",
                          "index": 1,
                          "text": "Medium"
                        },
                        "to": 499
                      },
                      "type": "range"
                    },
                    {
                      "options": {
                        "from": 500,
                        "result": {
                          "color": "dark-red",
                          "index": 2,
                          "text": "Hight"
                        },
                        "to": 1000
                      },
                      "type": "range"
                    }
                  ],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "#EAB839",
                        "value": 400
                      },
                      {
                        "color": "red",
                        "value": 500
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 4,
                "w": 13,
                "x": 11,
                "y": 8
              },
              "id": 14,
              "options": {
                "alignValue": "left",
                "legend": {
                  "displayMode": "hidden",
                  "placement": "bottom"
                },
                "mergeValues": true,
                "rowHeight": 0.9,
                "showValue": "never",
                "tooltip": {
                  "mode": "single"
                }
              },
              "targets": [
                {
                  "alias": "Traffic level",
                  "query": "SELECT count(distinct(\"object_id\")) as \"count\"  FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"!='' GROUP BY time(10m) fill(0)\n",
                  "rawQuery": true,
                  "refId": "A"
                }
              ],
              "title": "Historical traffic level, per 10 minutes",
              "type": "state-timeline"
            },
            {
              "datasource": null,
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "auto",
                    "spanNulls": false,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 8,
                "w": 11,
                "x": 0,
                "y": 12
              },
              "id": 8,
              "options": {
                "legend": {
                  "calcs": [],
                  "displayMode": "hidden",
                  "placement": "bottom"
                },
                "tooltip": {
                  "mode": "multi"
                }
              },
              "targets": [
                {
                  "alias": "Detected vehicles",
                  "groupBy": [
                    {
                      "params": [
                        "1m"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "0"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "amqp_consumer",
                  "orderByTime": "ASC",
                  "policy": "default",
                  "query": "SELECT count(distinct(\"object_id\")) FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter  and \"object_vehicle_type\"!='' GROUP BY time(1m) fill(0)",
                  "rawQuery": true,
                  "refId": "A",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "object_id"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "distinct"
                      },
                      {
                        "params": [],
                        "type": "count"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "dc",
                      "operator": "=",
                      "value": "deepstream"
                    }
                  ]
                }
              ],
              "title": "Total amount of detected vehicles, per 1 minute",
              "type": "timeseries"
            },
            {
              "datasource": null,
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "auto",
                    "spanNulls": false,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  }
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.van"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Van"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.sedan"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Sedan"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-green",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.coupe"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Coupe"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-yellow",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.largevehicle"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Large vehicle"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-blue",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.truck"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "Truck"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-orange",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "amqp_consumer.suv"
                    },
                    "properties": [
                      {
                        "id": "displayName",
                        "value": "SUV"
                      },
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "semi-dark-purple",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 8,
                "w": 13,
                "x": 11,
                "y": 12
              },
              "id": 9,
              "options": {
                "legend": {
                  "calcs": [],
                  "displayMode": "list",
                  "placement": "bottom"
                },
                "tooltip": {
                  "mode": "multi"
                }
              },
              "targets": [
                {
                  "groupBy": [
                    {
                      "params": [
                        "1m"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "0"
                      ],
                      "type": "fill"
                    }
                  ],
                  "hide": false,
                  "measurement": "amqp_consumer",
                  "orderByTime": "ASC",
                  "policy": "default",
                  "query": "SELECT count(distinct(\"object_id\")) as \"van\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='van' GROUP BY time(1m) fill(0)",
                  "rawQuery": true,
                  "refId": "A",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "object_id"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "distinct"
                      },
                      {
                        "params": [],
                        "type": "count"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "dc",
                      "operator": "=",
                      "value": "deepstream"
                    }
                  ]
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"sedan\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='sedan' GROUP BY time(1m) fill(0)",
                  "rawQuery": true,
                  "refId": "B"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"coupe\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='coupe' GROUP BY time(1m) fill(0)",
                  "rawQuery": true,
                  "refId": "C"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"largevehicle\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='largevehicle' GROUP BY time(1m) fill(0)",
                  "rawQuery": true,
                  "refId": "D"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"truck\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='truck' GROUP BY time(1m) fill(0)",
                  "rawQuery": true,
                  "refId": "E"
                },
                {
                  "hide": false,
                  "query": "SELECT count(distinct(\"object_id\")) as \"suv\" FROM \"amqp_consumer\" WHERE (\"dc\" = 'deepstream') AND $timeFilter and \"object_vehicle_type\"='suv' GROUP BY time(1m) fill(0)",
                  "rawQuery": true,
                  "refId": "F"
                }
              ],
              "title": "Historical amount by vehicle types, per 1 minute",
              "type": "timeseries"
            }
          ],
          "refresh": "5s",
          "schemaVersion": 30,
          "style": "dark",
          "tags": [],
          "templating": {
            "list": []
          },
          "time": {
            "from": "now-6h",
            "to": "now"
          },
          "timepicker": {},
          "timezone": "",
          "title": "Road Traffic",
          "uid": "m6uXPCGnk",
          "version": 1
        }
#    prometheus-stats:
#      gnetId: 2
#      revision: 2
#      datasource: Prometheus
#    local-dashboard:
#      url: https://example.com/repository/test.json

## Reference to external ConfigMap per provider. Use provider name as key and ConfiMap name as value.
## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
## ConfigMap data example:
##
## data:
##   example-dashboard.json: |
##     RAW_JSON
##
dashboardsConfigMaps: {}


## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  panels:
    disable_sanitize_html: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  security:
    allow_embedding: true
  dashboards:
    default_home_dashboard_path: /root/grafana1/dashboards/default/influxdb.json
## LDAP Authentication can be enabled with the following values on grafana.ini
## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
  # auth.ldap:
  #   enabled: true
  #   allow_sign_up: true
  #   config_file: /etc/grafana/ldap.toml

## Grafana's LDAP configuration
## Templated by the template in _helpers.tpl
## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
## ref: http://docs.grafana.org/installation/ldap/#configuration
ldap:
  # `existingSecret` is a reference to an existing secret containing the ldap configuration
  # for Grafana in a key `ldap-toml`.
  existingSecret: ""
  # `config` is the content of `ldap.toml` that will be stored in the created secret
  config: ""
  # config: |-
  #   verbose_logging = true

  #   [[servers]]
  #   host = "my-ldap-server"
  #   port = 636
  #   use_ssl = true
  #   start_tls = false
  #   ssl_skip_verify = false
  #   bind_dn = "uid=%s,ou=users,dc=myorg,dc=com"

## Grafana's SMTP configuration
## NOTE: To enable, grafana.ini must be configured with smtp.enabled
## ref: http://docs.grafana.org/installation/configuration/#smtp
smtp:
  # `existingSecret` is a reference to an existing secret containing the smtp configuration
  # for Grafana in keys `user` and `password`.
  existingSecret: ""

## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
sidecar:
  image: kiwigrid/k8s-sidecar:0.0.3
  imagePullPolicy: IfNotPresent
  resources:
#   limits:
#     cpu: 100m
#     memory: 100Mi
#   requests:
#     cpu: 50m
#     memory: 50Mi
  dashboards:
    enabled: false
    # label that the configmaps with dashboards are marked with
    label: grafana_dashboard
    # folder in the pod that should hold the collected dashboards
    folder: /tmp/dashboards
  datasources:
    enabled: false
    # label that the configmaps with datasources are marked with
    label: grafana_datasource

grafana_script:
  command:
    cd ~;
    mkdir ~/grafana1;
    cp  /var/lib/grafana/dashboards/default/influxdb.json  /var/lib/grafana/dashboards/default/influxdb1.json;
    sed -i "s|NODE_IP|${NODE_IP}|g"  /var/lib/grafana/dashboards/default/influxdb1.json;
    cp  -r /var/lib/grafana/dashboards ~/grafana1;
    rm -rf ~/grafana1/dashboards/default/influxdb.json;
    mv   ~/grafana1/dashboards/default/influxdb1.json  ~/grafana1/dashboards/default/influxdb.json;
    export PATH=$GF_PATHS_DATA:~/grafana1;
    /usr/share/grafana/bin/grafana-server --homepath=/usr/share/grafana --config=/etc/grafana/grafana.ini --packaging=docker cfg:default.log.mode=console cfg:default.paths.data=~/grafana1 cfg:default.paths.logs=/var/log/grafana cfg:default.paths.plugins=/var/lib/grafana/plugins cfg:default.paths.provisioning=/etc/grafana/provisioning;
     